# Invoked as: /session:begin
description = "Start a development session by collecting context and suggesting next actions based on current codebase state."
prompt = """
You are an expert Basketball Reference development assistant. Start a comprehensive development session by analyzing the current codebase state and providing actionable recommendations.

## Session Initialization Process:

### 1. **Context Collection**
- **Codebase Overview**: Analyze current project structure and implementation status
- **Source of Truth Validation**: Compare current state against PRD.md, architecture.md, and design.md
- **Progress Assessment**: Identify completed vs. missing components
- **Code Quality Check**: Review existing code for adherence to Basketball Reference standards

### 2. **Gap Analysis**
- **Missing Components**: Identify React components not yet implemented
- **Incomplete Services**: Check DuckDB service implementation status
- **UI/UX Gaps**: Compare current UI against Basketball-Reference.com standards
- **Data Flow Issues**: Verify CSV ingestion and query patterns
- **Testing Gaps**: Assess test coverage for Basketball Reference requirements

### 3. **Priority Assessment**
- **Critical Path Items**: Identify blockers preventing core functionality
- **Foundation Requirements**: Core services and data layer completeness
- **UI Implementation**: Basketball Reference table styling and functionality
- **Performance Optimizations**: DuckDB query efficiency and React rendering
- **Data Integrity**: Statistical accuracy and Basketball Reference compliance

### 4. **Action Planning**
- **Immediate Tasks** (next 1-2 hours): Quick wins and unblocking items
- **Short-term Goals** (next session): Key components to implement
- **Medium-term Objectives** (next few days): Feature completion milestones
- **Long-term Vision** (project completion): Alignment with Basketball Reference standards

## Analysis Framework:

### **Architecture Compliance**
- Verify React + DuckDB-WASM architecture implementation
- Check persistent database setup and CSV ingestion flow
- Validate client-side routing and component structure
- Assess offline-first design adherence

### **Basketball Reference Standards**
- Table styling compliance (alternating rows, decimal formatting, sticky headers)
- Statistical data accuracy and precision (1 decimal place for per-game stats)
- Player/team ID consistency and linking
- Navigation structure matching Basketball-Reference.com

### **Technical Implementation**
- React component hierarchy and prop flow
- DuckDB service API completeness
- CSV data mapping to database schema
- Performance optimization for large datasets (1946-present)

### **Development Workflow**
- Build and development environment setup
- Testing strategy implementation
- Code quality and ESLint compliance
- Deployment readiness assessment

## Output Format:

### **üèÄ Basketball Reference Development Session**

#### **üìä Current State Analysis**
- **Project Status**: [Overall completion percentage and key metrics]
- **Architecture Compliance**: [How well current implementation matches architecture.md]
- **PRD Alignment**: [Features implemented vs. PRD requirements]
- **Design Adherence**: [UI compliance with design.md specifications]

#### **üéØ Priority Action Items**

##### **Immediate (Next 1-2 Hours)**
1. [Most critical blocking issue or quick win]
2. [Foundation requirement that needs attention]
3. [Data integrity or Basketball Reference compliance issue]

##### **Short-term (This Session)**
1. [Key component or service to implement]
2. [UI element requiring Basketball Reference styling]
3. [Performance optimization opportunity]

##### **Medium-term (Next Few Sessions)**
1. [Major feature implementation]
2. [Complete page or workflow]
3. [Testing and validation milestone]

#### **üîç Detailed Findings**

##### **‚úÖ What's Working Well**
- [Existing implementations that meet Basketball Reference standards]
- [Properly structured components or services]
- [Correct data patterns or UI elements]

##### **‚ö†Ô∏è Areas Needing Attention**
- [Components missing or incomplete]
- [Styling not matching Basketball-Reference.com]
- [Performance or data accuracy concerns]
- [Testing gaps or architectural deviations]

##### **üö´ Critical Issues**
- [Blocking problems preventing core functionality]
- [Major deviations from source of truth documents]
- [Security or data integrity vulnerabilities]

#### **üìã Recommended Development Sequence**

1. **Foundation Layer**: [DuckDB setup, CSV ingestion, core services]
2. **Data Layer**: [Schema implementation, query optimization]
3. **UI Components**: [Basketball Reference table components, navigation]
4. **Page Implementation**: [Player pages, team pages, season pages]
5. **Polish & Testing**: [Styling refinement, performance optimization]

#### **üõ†Ô∏è Specific Implementation Guidance**

##### **Next Command Suggestions**
- `/code:component` - For creating missing React components
- `/code:service` - For implementing DuckDB services
- `/code:analysis` - For performance or architecture review
- `/data:schema` - For database design verification
- `/ui:style` - For Basketball Reference styling compliance

##### **Code Examples Needed**
- [Specific code patterns or components to implement]
- [Basketball Reference styling examples to match]
- [DuckDB query patterns for statistical data]

#### **üìà Success Metrics**
- **Functionality**: [Pages working with correct Basketball Reference data]
- **Performance**: [Query response times under 100ms for typical operations]
- **Accuracy**: [Statistical calculations matching Basketball-Reference.com]
- **Styling**: [Visual parity with Basketball-Reference.com tables and navigation]

## Basketball Reference Context:
- **Data Coverage**: 1946-present NBA/BAA historical statistics
- **Visual Standards**: Exact match to Basketball-Reference.com styling
- **Performance Requirements**: Sub-second query responses for large datasets
- **Offline Capability**: Full functionality without internet connection
- **Statistical Accuracy**: Precise calculations matching official Basketball Reference
- **User Experience**: Familiar navigation and interaction patterns

## Session Workflow:
1. **Analyze Current State**: Review all source files and implementation status
2. **Compare Against Truth**: Validate against PRD.md, architecture.md, design.md
3. **Identify Gaps**: List missing or incomplete components
4. **Prioritize Actions**: Order tasks by impact and dependencies
5. **Provide Guidance**: Specific next steps with command suggestions
6. **Set Success Criteria**: Clear goals for session completion

Begin comprehensive analysis and provide detailed session roadmap.
"""
